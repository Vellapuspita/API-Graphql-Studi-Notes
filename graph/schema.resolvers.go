package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"strconv"
	"studynotes/graph/model"
	"studynotes/middleware"
	"studynotes/models"
	"studynotes/utils"

	"golang.org/x/crypto/bcrypt"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthResponse, error) {
	if input.Password != input.ConfirmPassword {
		return nil, fmt.Errorf("passwords do not match")
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %v", err)
	}

	user := &models.Users{
		Name:     input.Name,
		Email:    input.Email,
		Password: string(hashedPassword),
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, fmt.Errorf("failed to create user: %v", err)
	}

	// Generate token
	token, err := utils.GenerateJWT(user.ID, user.Email, "user")
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %v", err)
	}

	return &model.AuthResponse{
		Token: token,
		User: &model.User{
			ID:    fmt.Sprint(user.ID),
			Name:  user.Name,
			Email: user.Email,
		},
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthResponse, error) {
	var user models.Users
	if err := r.DB.Where("email = ?", email).First(&user).Error; err != nil {
		return nil, fmt.Errorf("user not found")
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password)); err != nil {
		return nil, fmt.Errorf("incorrect password")
	}

	token, err := utils.GenerateJWT(user.ID, user.Email, "user")
	if err != nil {
		return nil, fmt.Errorf("failed to generate token")
	}

	return &model.AuthResponse{
		Token: token,
		User: &model.User{
			ID:    fmt.Sprint(user.ID),
			Name:  user.Name,
			Email: user.Email,
		},
	}, nil
}

// StudyNotes is the resolver for the studyNotes field.
func (r *queryResolver) StudyNotes(ctx context.Context) ([]*model.StudyNote, error) {
	return []*model.StudyNote{
		{ID: "1", Title: "Belajar GraphQL"},
		{ID: "2", Title: "Belajar Go dan gqlgen"},
		{ID: "3", Title: "Autentikasi JWT"},
	}, nil
}

// StudyNote is the resolver for the StudyNote field.
func (r *queryResolver) StudyNote(ctx context.Context, id string) (*model.StudyNote, error) {
	panic(fmt.Errorf("not implemented: StudyNote - StudyNote"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	userIDRaw := ctx.Value(middleware.UserIDKey)
	if userIDRaw == nil {
		return nil, fmt.Errorf("unauthenticated")
	}

	userID, ok := userIDRaw.(uint)
	if !ok {
		return nil, fmt.Errorf("invalid user ID in context")
	}

	var user models.Users
	if err := r.DB.First(&user, userID).Error; err != nil {
		return nil, fmt.Errorf("user not found")
	}

	return &model.User{
		ID:    strconv.Itoa(int(user.ID)),
		Name:  user.Name,
		Email: user.Email,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
